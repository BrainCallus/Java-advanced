memberSearchIndex = [{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"addJobSlices(List<ParallelMapperImpl.JobSlice>)","url":"addJobSlices(java.util.List)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"all(int, List<? extends T>, Predicate<? super T>)","url":"all(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ScalarIP","l":"all(int, List<? extends T>, Predicate<? super T>)","url":"all(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"any(int, List<? extends T>, Predicate<? super T>)","url":"any(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ScalarIP","l":"any(int, List<? extends T>, Predicate<? super T>)","url":"any(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"checkArgs(int)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.JobSlice","l":"checker"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"close()"},{"p":"info.kgeorgiy.java.advanced.mapper","c":"ParallelMapper","l":"close()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.CompleteChecker","l":"CompleteChecker(int)","url":"%3Cinit%3E(int)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.CompleteChecker","l":"completed"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"count(int, List<? extends T>, Predicate<? super T>)","url":"count(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ScalarIP","l":"count(int, List<? extends T>, Predicate<? super T>)","url":"count(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.CompleteChecker","l":"errors"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"execute(int, List<T>, Function<Stream<T>, E>, Function<Stream<E>, E>)","url":"execute(int,java.util.List,java.util.function.Function,java.util.function.Function)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"executeWithoutMapper(List<Stream<T>>, Function<Stream<T>, E>)","url":"executeWithoutMapper(java.util.List,java.util.function.Function)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"extractSubtask()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"filter(int, List<? extends T>, Predicate<? super T>)","url":"filter(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ListIP","l":"filter(int, List<? extends T>, Predicate<? super T>)","url":"filter(int,java.util.List,java.util.function.Predicate)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"getBlocks(List<E>, int)","url":"getBlocks(java.util.List,int)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP.Monoid","l":"getIdentity()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"getJob(Function<? super E, ? extends T>, List<E>, List<T>, ParallelMapperImpl.CompleteChecker)","url":"getJob(java.util.function.Function,java.util.List,java.util.List,info.kgeorgiy.ja.churakova.concurrent.ParallelMapperImpl.CompleteChecker)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP.Monoid","l":"getOperator()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"getStarted()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"getStarted(Stream<T>, List<E>, int, Function<Stream<T>, E>)","url":"getStarted(java.util.stream.Stream,java.util.List,int,java.util.function.Function)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP.Monoid","l":"identity"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.CompleteChecker","l":"isCompleted()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"IterativeParallelism()","url":"%3Cinit%3E()"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"IterativeParallelism(ParallelMapper)","url":"%3Cinit%3E(info.kgeorgiy.java.advanced.mapper.ParallelMapper)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.JobSlice","l":"JobSlice(Runnable, ParallelMapperImpl.CompleteChecker)","url":"%3Cinit%3E(java.lang.Runnable,info.kgeorgiy.ja.churakova.concurrent.ParallelMapperImpl.CompleteChecker)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"join(int, List<?>)","url":"join(int,java.util.List)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ListIP","l":"join(int, List<?>)","url":"join(int,java.util.List)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"launchJob(ParallelMapperImpl.JobSlice)","url":"launchJob(info.kgeorgiy.ja.churakova.concurrent.ParallelMapperImpl.JobSlice)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"map(Function<? super T, ? extends R>, List<? extends T>)","url":"map(java.util.function.Function,java.util.List)"},{"p":"info.kgeorgiy.java.advanced.mapper","c":"ParallelMapper","l":"map(Function<? super T, ? extends R>, List<? extends T>)","url":"map(java.util.function.Function,java.util.List)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"map(int, List<? extends T>, Function<? super T, ? extends U>)","url":"map(int,java.util.List,java.util.function.Function)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ListIP","l":"map(int, List<? extends T>, Function<? super T, ? extends U>)","url":"map(int,java.util.List,java.util.function.Function)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"mapReduce(int, List<T>, Function<T, R>, AdvancedIP.Monoid<R>)","url":"mapReduce(int,java.util.List,java.util.function.Function,info.kgeorgiy.java.advanced.concurrent.AdvancedIP.Monoid)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP","l":"mapReduce(int, List<T>, Function<T, R>, AdvancedIP.Monoid<R>)","url":"mapReduce(int,java.util.List,java.util.function.Function,info.kgeorgiy.java.advanced.concurrent.AdvancedIP.Monoid)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"maximum(int, List<? extends T>, Comparator<? super T>)","url":"maximum(int,java.util.List,java.util.Comparator)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ScalarIP","l":"maximum(int, List<? extends T>, Comparator<? super T>)","url":"maximum(int,java.util.List,java.util.Comparator)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"minimum(int, List<? extends T>, Comparator<? super T>)","url":"minimum(int,java.util.List,java.util.Comparator)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"ScalarIP","l":"minimum(int, List<? extends T>, Comparator<? super T>)","url":"minimum(int,java.util.List,java.util.Comparator)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP.Monoid","l":"Monoid(T, BinaryOperator<T>)","url":"%3Cinit%3E(T,java.util.function.BinaryOperator)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP.Monoid","l":"operator"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"parallelMapper"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"ParallelMapperImpl(int)","url":"%3Cinit%3E(int)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"queue"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"reduce(int, List<T>, AdvancedIP.Monoid<T>)","url":"reduce(int,java.util.List,info.kgeorgiy.java.advanced.concurrent.AdvancedIP.Monoid)"},{"p":"info.kgeorgiy.java.advanced.concurrent","c":"AdvancedIP","l":"reduce(int, List<T>, AdvancedIP.Monoid<T>)","url":"reduce(int,java.util.List,info.kgeorgiy.java.advanced.concurrent.AdvancedIP.Monoid)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.JobSlice","l":"subtask"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"IterativeParallelism","l":"sumAccum(Long, Long)","url":"sumAccum(java.lang.Long,java.lang.Long)"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl","l":"threads"},{"p":"info.kgeorgiy.ja.churakova.concurrent","c":"ParallelMapperImpl.CompleteChecker","l":"toComplete"}]
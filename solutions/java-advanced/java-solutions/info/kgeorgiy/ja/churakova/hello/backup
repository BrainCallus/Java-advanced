package info.kgeorgiy.ja.churakova.hello;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.charset.StandardCharsets;
import java.util.Iterator;

import static info.kgeorgiy.ja.churakova.hello.Utilits.DEFAULT_BUF_SIZE;
import static info.kgeorgiy.ja.churakova.hello.Utilits.TIMEOUT;

public class HelloUDPNonblockingClient extends AbstractClient {

    private static class Context {
        ByteBuffer buffer;
        int threadNumber;
        int requestNumber;
        int maxRequests;

        public Context(int threadNumber, int maxRequests) {
            this.threadNumber = threadNumber;
            this.maxRequests = maxRequests + 1;
            requestNumber = 1;
        }

        String getName(String prefix) {
            return String.format("%s%d_%d", prefix, threadNumber, requestNumber);
        }

        boolean sentAll() {
            return maxRequests - requestNumber == 0;
        }
    }


    @Override
    protected void runImpl(InetSocketAddress address, String prefix, int threads, int requests) {
        try {
            Selector selector = Selector.open();

            for (int i = 1; i < threads + 1; i++) {
                DatagramChannel channel = DatagramChannel.open();
                channel.configureBlocking(false);
                channel.connect(address);
                channel.register(selector, SelectionKey.OP_WRITE, new Context(i, requests));
            }

            ByteBuffer buffer = ByteBuffer.allocate(DEFAULT_BUF_SIZE);

            while (!Thread.interrupted() && !selector.keys().isEmpty()) {
                selector.select(TIMEOUT);
                if (selector.selectedKeys().isEmpty()) {
                    selector.keys().forEach(key->key.interestOps(SelectionKey.OP_WRITE));
                } else {
                    for (final Iterator<SelectionKey> i = selector.selectedKeys().iterator(); i.hasNext(); ) {
                        final SelectionKey key = i.next();
                        if (key.isValid()) {
                            if (key.isReadable()) {
                                read(key, buffer, prefix);
                            }
                            if (key.isValid() && key.isWritable()) {
                                write(key, address, prefix);
                            }
                        }
                        i.remove();
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("IOException: " + e.getMessage());
        }
    }


    private void write(SelectionKey key, InetSocketAddress address, String prefix) {
        final DatagramChannel serverChannel = (DatagramChannel) key.channel();
        Context context = (Context) key.attachment();
        byte[] nameBytes = context.getName(prefix).getBytes(StandardCharsets.UTF_8);
        context.buffer = ByteBuffer.allocate(nameBytes.length);
        context.buffer.put(nameBytes);
        context.buffer.flip();
        try {
            int sent = serverChannel.send(context.buffer, address);
            if (sent == nameBytes.length) {
                key.interestOps(SelectionKey.OP_READ);
            }
        } catch (IOException e) {
            System.err.println("Failed to send data: " + e.getMessage());
        }
    }

    private void read(SelectionKey key, ByteBuffer buffer, String prefix) {
        final DatagramChannel serverChannel = (DatagramChannel) key.channel();
        buffer.clear();
        Context context = (Context) key.attachment();
        try {

            SocketAddress socketAddress = serverChannel.receive(buffer);

            if (socketAddress != null) {

                String response = stringFromBuffer(buffer);
                if (response.contains(context.getName(prefix))) {
                    System.out.println(response);
                    context.requestNumber++;
                    if (context.sentAll()) {
                        serverChannel.close();
                        key.cancel();
                    }
                }

            }
        } catch (IOException e) {
            System.err.println("Failed to get data: " + e.getMessage());
        }
        if (key.isValid()) {
            key.interestOps(SelectionKey.OP_WRITE);
        }
    }

    public static String stringFromBuffer(ByteBuffer buffer) {
        buffer.flip();
        byte[] bytes = new byte[buffer.remaining()];
        buffer.get(bytes);
        return new String(bytes, StandardCharsets.UTF_8).trim();
    }


    public static void main(String[] args) {
        AbstractClient.init(new HelloUDPNonblockingClient(), args);
    }
}